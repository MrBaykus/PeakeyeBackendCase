using Microsoft.AspNetCore.Mvc;
using PeakeyeBackendCase.Models;
using PeakeyeBackendCase.Repositories.Interfaces;

namespace PeakeyeBackendCase.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class VulnerabilityController : ControllerBase
    {
        private readonly IVulnerabilityRepository _vulnerabilityRepository;
        public VulnerabilityController(IVulnerabilityRepository vulnerabilityRepository)
        {
            _vulnerabilityRepository = vulnerabilityRepository;
        }

        [HttpGet]
        public async Task<IActionResult> GetAll([FromQuery] string? name, [FromQuery] string? severity, [FromQuery] string? status)
        {
            var vulnerabilities = await _vulnerabilityRepository.GetAllAsync();

            if (!string.IsNullOrEmpty(name))
                vulnerabilities = vulnerabilities.Where(v => v.Name.Contains(name, StringComparison.OrdinalIgnoreCase));
            if (!string.IsNullOrEmpty(severity))
                vulnerabilities = vulnerabilities.Where(v => v.Severity.Equals(severity, StringComparison.OrdinalIgnoreCase));
            if (!string.IsNullOrEmpty(status))
                vulnerabilities = vulnerabilities.Where(v => v.Status.Equals(status, StringComparison.OrdinalIgnoreCase));
            return Ok(vulnerabilities);
        }

        [HttpGet("{id}")]
        public async Task<IActionResult> GetById(int id)
        {
            var vulnerability = await _vulnerabilityRepository.GetByIdAsync(id);
            if (vulnerability == null)
                return NotFound("Zafiyet bulunamadı.");

            return Ok(vulnerability);
        }

        [HttpPost]
        public async Task<IActionResult> Create([FromBody] Vulnerability vulnerability)
        {
            if (!ModelState.IsValid)
                return BadRequest(ModelState);

            await _vulnerabilityRepository.AddAsync(vulnerability);
            return CreatedAtAction(nameof(GetById), new { id = vulnerability.Id }, vulnerability);
        }

        [HttpPut("{id}")]
        public async Task<IActionResult> Update(int id, [FromBody] Vulnerability vulnerability)
        {
            if (!ModelState.IsValid)
                return BadRequest(ModelState);

            var existingVulnerability = await _vulnerabilityRepository.GetByIdAsync(id);
            if (existingVulnerability == null)
                return NotFound("Zafiyet bulunamadı.");

            existingVulnerability.Name = vulnerability.Name;
            existingVulnerability.Description = vulnerability.Description;
            existingVulnerability.CVE = vulnerability.CVE;
            existingVulnerability.Status = vulnerability.Status;
            existingVulnerability.AccessVector = vulnerability.AccessVector;
            existingVulnerability.AccessComplexity = vulnerability.AccessComplexity;
            existingVulnerability.Authentication = vulnerability.Authentication;
            existingVulnerability.AvailabilityImpact = vulnerability.AvailabilityImpact;
            existingVulnerability.ConfidentialityImpact = vulnerability.ConfidentialityImpact;
            existingVulnerability.IntegrityImpact = vulnerability.IntegrityImpact;

            await _vulnerabilityRepository.UpdateAsync(existingVulnerability);

            return NoContent();
        }

        [HttpDelete("{id}")]
        public async Task<IActionResult> Delete(int id)
        {
            var existingVulnerability = await _vulnerabilityRepository.GetByIdAsync(id);
            if (existingVulnerability == null)
                return NotFound("Zafiyet bulunamadı.");

            await _vulnerabilityRepository.DeleteAsync(id);
            return NoContent();
        }
    }
}
