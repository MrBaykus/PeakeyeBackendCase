using Microsoft.EntityFrameworkCore;
using PeakeyeBackendCase.Data;
using PeakeyeBackendCase.Helpers;
using PeakeyeBackendCase.Models;
using PeakeyeBackendCase.Repositories.Interfaces;

namespace PeakeyeBackendCase.Repositories
{
    public class VulnerabilityRepository : IVulnerabilityRepository
    {
        private readonly AppDbContext _context;

        public VulnerabilityRepository(AppDbContext context)
        {
            _context = context;
        }

        public async Task<IEnumerable<Vulnerability>> GetAllAsync()
        {
            return await _context.Vulnerabilities.ToListAsync();
        }

        public async Task<Vulnerability> GetByIdAsync(int id)
        {
            return await _context.Vulnerabilities.FindAsync(id);
        }

        public async Task AddAsync(Vulnerability vulnerability)
        {
            double calculatedCvss = vulnerability.Calculate();
            vulnerability.CVSS = calculatedCvss;
            vulnerability.Severity = CvssCalculator.DetermineSeverity(calculatedCvss);
            await _context.Vulnerabilities.AddAsync(vulnerability);
            await _context.SaveChangesAsync();
        }

        public async Task UpdateAsync(Vulnerability vulnerability)
        {
            double calculatedCvss = vulnerability.Calculate();
            vulnerability.CVSS = calculatedCvss;
            vulnerability.Severity = CvssCalculator.DetermineSeverity(calculatedCvss);
            _context.Vulnerabilities.Update(vulnerability);
            await _context.SaveChangesAsync();
        }

        public async Task DeleteAsync(int id)
        {
            var vulnerability = await _context.Vulnerabilities.FindAsync(id);
            if (vulnerability != null)
            {
                _context.Vulnerabilities.Remove(vulnerability);
                await _context.SaveChangesAsync();
            }
        }
    }
}
